/* tslint:disable */
/* eslint-disable */
/**
 * BOS.Admin.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Branch
 */
export interface Branch {
    /**
     * 
     * @type {number}
     * @memberof Branch
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Branch
     */
    'tenantId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'phoneNumber'?: string | null;
}
/**
 * 
 * @export
 * @interface BranchServiceResponse
 */
export interface BranchServiceResponse {
    /**
     * 
     * @type {ResponseCode}
     * @memberof BranchServiceResponse
     */
    'responseCode'?: ResponseCode;
    /**
     * 
     * @type {string}
     * @memberof BranchServiceResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Branch}
     * @memberof BranchServiceResponse
     */
    'data'?: Branch;
}


/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'parentId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'branchId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Category
     */
    'isHasSubcategory'?: boolean;
}
/**
 * 
 * @export
 * @interface CategoryServiceResponse
 */
export interface CategoryServiceResponse {
    /**
     * 
     * @type {ResponseCode}
     * @memberof CategoryServiceResponse
     */
    'responseCode'?: ResponseCode;
    /**
     * 
     * @type {string}
     * @memberof CategoryServiceResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Category}
     * @memberof CategoryServiceResponse
     */
    'data'?: Category;
}


/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'categoryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'price'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    'isInStock'?: boolean;
}
/**
 * 
 * @export
 * @interface ProductServiceResponse
 */
export interface ProductServiceResponse {
    /**
     * 
     * @type {ResponseCode}
     * @memberof ProductServiceResponse
     */
    'responseCode'?: ResponseCode;
    /**
     * 
     * @type {string}
     * @memberof ProductServiceResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Product}
     * @memberof ProductServiceResponse
     */
    'data'?: Product;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const ResponseCode = {
    NUMBER_200: 200,
    NUMBER_204: 204,
    NUMBER_400: 400,
    NUMBER_401: 401,
    NUMBER_404: 404,
    NUMBER_500: 500
} as const;

export type ResponseCode = typeof ResponseCode[keyof typeof ResponseCode];


/**
 * 
 * @export
 * @interface ServiceResponse
 */
export interface ServiceResponse {
    /**
     * 
     * @type {ResponseCode}
     * @memberof ServiceResponse
     */
    'responseCode'?: ResponseCode;
    /**
     * 
     * @type {string}
     * @memberof ServiceResponse
     */
    'message'?: string | null;
}


/**
 * 
 * @export
 * @interface Test
 */
export interface Test {
    /**
     * 
     * @type {number}
     * @memberof Test
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Test
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Test
     */
    'surname'?: string | null;
}
/**
 * 
 * @export
 * @interface TestListServiceResponse
 */
export interface TestListServiceResponse {
    /**
     * 
     * @type {ResponseCode}
     * @memberof TestListServiceResponse
     */
    'responseCode'?: ResponseCode;
    /**
     * 
     * @type {string}
     * @memberof TestListServiceResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<Test>}
     * @memberof TestListServiceResponse
     */
    'data'?: Array<Test> | null;
}


/**
 * 
 * @export
 * @interface TestServiceResponse
 */
export interface TestServiceResponse {
    /**
     * 
     * @type {ResponseCode}
     * @memberof TestServiceResponse
     */
    'responseCode'?: ResponseCode;
    /**
     * 
     * @type {string}
     * @memberof TestServiceResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Test}
     * @memberof TestServiceResponse
     */
    'data'?: Test;
}


/**
 * 
 * @export
 * @interface WeatherForecast
 */
export interface WeatherForecast {
    /**
     * 
     * @type {string}
     * @memberof WeatherForecast
     */
    'date'?: string;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    'temperatureC'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    'temperatureF'?: number;
    /**
     * 
     * @type {string}
     * @memberof WeatherForecast
     */
    'summary'?: string | null;
}

/**
 * BranchApi - axios parameter creator
 * @export
 */
export const BranchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Branch} [branch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiBranchAddPost: async (branch?: Branch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Branch/Add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(branch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Branch} [branch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiBranchDeletePost: async (branch?: Branch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Branch/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(branch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiBranchGetByIdAsyncGet: async (body?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Branch/GetByIdAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Branch} [branch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiBranchUpdatePost: async (branch?: Branch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Branch/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(branch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BranchApi - functional programming interface
 * @export
 */
export const BranchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BranchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Branch} [branch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiBranchAddPost(branch?: Branch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiBranchAddPost(branch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Branch} [branch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiBranchDeletePost(branch?: Branch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiBranchDeletePost(branch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiBranchGetByIdAsyncGet(body?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiBranchGetByIdAsyncGet(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Branch} [branch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiBranchUpdatePost(branch?: Branch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiBranchUpdatePost(branch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BranchApi - factory interface
 * @export
 */
export const BranchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BranchApiFp(configuration)
    return {
        /**
         * 
         * @param {Branch} [branch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiBranchAddPost(branch?: Branch, options?: any): AxiosPromise<ServiceResponse> {
            return localVarFp.adminapiBranchAddPost(branch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Branch} [branch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiBranchDeletePost(branch?: Branch, options?: any): AxiosPromise<ServiceResponse> {
            return localVarFp.adminapiBranchDeletePost(branch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiBranchGetByIdAsyncGet(body?: number, options?: any): AxiosPromise<BranchServiceResponse> {
            return localVarFp.adminapiBranchGetByIdAsyncGet(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Branch} [branch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiBranchUpdatePost(branch?: Branch, options?: any): AxiosPromise<ServiceResponse> {
            return localVarFp.adminapiBranchUpdatePost(branch, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BranchApi - object-oriented interface
 * @export
 * @class BranchApi
 * @extends {BaseAPI}
 */
export class BranchApi extends BaseAPI {
    /**
     * 
     * @param {Branch} [branch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchApi
     */
    public adminapiBranchAddPost(branch?: Branch, options?: AxiosRequestConfig) {
        return BranchApiFp(this.configuration).adminapiBranchAddPost(branch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Branch} [branch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchApi
     */
    public adminapiBranchDeletePost(branch?: Branch, options?: AxiosRequestConfig) {
        return BranchApiFp(this.configuration).adminapiBranchDeletePost(branch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchApi
     */
    public adminapiBranchGetByIdAsyncGet(body?: number, options?: AxiosRequestConfig) {
        return BranchApiFp(this.configuration).adminapiBranchGetByIdAsyncGet(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Branch} [branch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchApi
     */
    public adminapiBranchUpdatePost(branch?: Branch, options?: AxiosRequestConfig) {
        return BranchApiFp(this.configuration).adminapiBranchUpdatePost(branch, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Category} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiCategoryAddPost: async (category?: Category, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Category/Add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(category, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Category} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiCategoryDeletePost: async (category?: Category, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Category/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(category, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiCategoryGetByIdAsyncGet: async (body?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Category/GetByIdAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Category} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiCategoryUpdatePost: async (category?: Category, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Category/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(category, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Category} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiCategoryAddPost(category?: Category, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiCategoryAddPost(category, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Category} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiCategoryDeletePost(category?: Category, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiCategoryDeletePost(category, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiCategoryGetByIdAsyncGet(body?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiCategoryGetByIdAsyncGet(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Category} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiCategoryUpdatePost(category?: Category, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiCategoryUpdatePost(category, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {Category} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiCategoryAddPost(category?: Category, options?: any): AxiosPromise<ServiceResponse> {
            return localVarFp.adminapiCategoryAddPost(category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Category} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiCategoryDeletePost(category?: Category, options?: any): AxiosPromise<ServiceResponse> {
            return localVarFp.adminapiCategoryDeletePost(category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiCategoryGetByIdAsyncGet(body?: number, options?: any): AxiosPromise<CategoryServiceResponse> {
            return localVarFp.adminapiCategoryGetByIdAsyncGet(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Category} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiCategoryUpdatePost(category?: Category, options?: any): AxiosPromise<ServiceResponse> {
            return localVarFp.adminapiCategoryUpdatePost(category, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @param {Category} [category] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public adminapiCategoryAddPost(category?: Category, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).adminapiCategoryAddPost(category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Category} [category] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public adminapiCategoryDeletePost(category?: Category, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).adminapiCategoryDeletePost(category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public adminapiCategoryGetByIdAsyncGet(body?: number, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).adminapiCategoryGetByIdAsyncGet(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Category} [category] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public adminapiCategoryUpdatePost(category?: Category, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).adminapiCategoryUpdatePost(category, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiProductAddPost: async (product?: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Product/Add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(product, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiProductDeletePost: async (product?: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Product/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(product, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiProductGetByIdAsyncGet: async (body?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Product/GetByIdAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiProductUpdatePost: async (product?: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Product/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(product, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiProductAddPost(product?: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiProductAddPost(product, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiProductDeletePost(product?: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiProductDeletePost(product, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiProductGetByIdAsyncGet(body?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiProductGetByIdAsyncGet(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiProductUpdatePost(product?: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiProductUpdatePost(product, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiProductAddPost(product?: Product, options?: any): AxiosPromise<ServiceResponse> {
            return localVarFp.adminapiProductAddPost(product, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiProductDeletePost(product?: Product, options?: any): AxiosPromise<ServiceResponse> {
            return localVarFp.adminapiProductDeletePost(product, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiProductGetByIdAsyncGet(body?: number, options?: any): AxiosPromise<ProductServiceResponse> {
            return localVarFp.adminapiProductGetByIdAsyncGet(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiProductUpdatePost(product?: Product, options?: any): AxiosPromise<ServiceResponse> {
            return localVarFp.adminapiProductUpdatePost(product, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @param {Product} [product] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public adminapiProductAddPost(product?: Product, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).adminapiProductAddPost(product, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Product} [product] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public adminapiProductDeletePost(product?: Product, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).adminapiProductDeletePost(product, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public adminapiProductGetByIdAsyncGet(body?: number, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).adminapiProductGetByIdAsyncGet(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Product} [product] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public adminapiProductUpdatePost(product?: Product, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).adminapiProductUpdatePost(product, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Test} [test] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiTestAddPost: async (test?: Test, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Test/Add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(test, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Test} [test] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiTestDeleteDelete: async (test?: Test, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Test/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(test, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiTestGetByIdGet: async (body?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Test/GetById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiTestGetListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Test/GetList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Test} [test] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiTestUpdatePut: async (test?: Test, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adminapi/Test/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(test, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Test} [test] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiTestAddPost(test?: Test, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiTestAddPost(test, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Test} [test] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiTestDeleteDelete(test?: Test, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiTestDeleteDelete(test, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiTestGetByIdGet(body?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiTestGetByIdGet(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiTestGetListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestListServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiTestGetListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Test} [test] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminapiTestUpdatePut(test?: Test, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminapiTestUpdatePut(test, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestApiFp(configuration)
    return {
        /**
         * 
         * @param {Test} [test] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiTestAddPost(test?: Test, options?: any): AxiosPromise<TestServiceResponse> {
            return localVarFp.adminapiTestAddPost(test, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Test} [test] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiTestDeleteDelete(test?: Test, options?: any): AxiosPromise<TestServiceResponse> {
            return localVarFp.adminapiTestDeleteDelete(test, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiTestGetByIdGet(body?: number, options?: any): AxiosPromise<TestServiceResponse> {
            return localVarFp.adminapiTestGetByIdGet(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiTestGetListGet(options?: any): AxiosPromise<TestListServiceResponse> {
            return localVarFp.adminapiTestGetListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Test} [test] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminapiTestUpdatePut(test?: Test, options?: any): AxiosPromise<TestServiceResponse> {
            return localVarFp.adminapiTestUpdatePut(test, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * 
     * @param {Test} [test] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public adminapiTestAddPost(test?: Test, options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).adminapiTestAddPost(test, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Test} [test] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public adminapiTestDeleteDelete(test?: Test, options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).adminapiTestDeleteDelete(test, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public adminapiTestGetByIdGet(body?: number, options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).adminapiTestGetByIdGet(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public adminapiTestGetListGet(options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).adminapiTestGetListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Test} [test] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public adminapiTestUpdatePut(test?: Test, options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).adminapiTestUpdatePut(test, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WeatherForecastApi - axios parameter creator
 * @export
 */
export const WeatherForecastApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeatherForecast: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WeatherForecast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WeatherForecastApi - functional programming interface
 * @export
 */
export const WeatherForecastApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WeatherForecastApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeatherForecast(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WeatherForecast>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeatherForecast(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WeatherForecastApi - factory interface
 * @export
 */
export const WeatherForecastApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WeatherForecastApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeatherForecast(options?: any): AxiosPromise<Array<WeatherForecast>> {
            return localVarFp.getWeatherForecast(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WeatherForecastApi - object-oriented interface
 * @export
 * @class WeatherForecastApi
 * @extends {BaseAPI}
 */
export class WeatherForecastApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherForecastApi
     */
    public getWeatherForecast(options?: AxiosRequestConfig) {
        return WeatherForecastApiFp(this.configuration).getWeatherForecast(options).then((request) => request(this.axios, this.basePath));
    }
}


